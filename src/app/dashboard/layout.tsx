

"use client";

import { useState, useEffect, useCallback, createContext, useContext, ReactNode, useRef } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger } from "@/components/ui/dialog";
import { Sheet, SheetContent, SheetTrigger, SheetTitle, SheetDescription } from "@/components/ui/sheet";
import { Home, BarChart2, User, Menu, LogOut, Languages, Briefcase, Pizza, ArrowLeft, Share2, Star, Info, CheckCircle, Contact, Phone, Mail, Search, Upload } from "lucide-react";
import { Logo } from "@/components/logo";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { cn } from '@/lib/utils';
import { translateText, TranslateTextInput } from '@/ai/flows/translate-text';
import { format } from 'date-fns';
import { db } from '@/lib/firebase';
import { collection, addDoc, onSnapshot, query, orderBy, Timestamp, doc, updateDoc, deleteDoc, getDoc } from 'firebase/firestore';
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { useSettings } from '../layout';


const originalText: Record<string, string> = {
    // Nav
    home: "‡ªú‡ªâ‡∫≤‡∫´‡∫º‡∫±‡∫Å",
    income: "‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    expense: "‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    report: "‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô",

    // Header
    menu: "‡ªÄ‡∫°‡∫ô‡∫π",
    back: "‡∫Å‡∫±‡∫ö‡∫Ñ‡∫∑‡∫ô",
    changeLanguage: "‡∫õ‡ªà‡∫Ω‡∫ô‡∫û‡∫≤‡∫™‡∫≤",
    profile: "‡ªÇ‡∫õ‡∫£‡ªÑ‡∫ü‡∫•‡ªå",
    logout: "‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö",

    // Dashboard Page
    welcome: "‡∫ç‡∫¥‡∫ô‡∫î‡∫µ‡∫ï‡ªâ‡∫≠‡∫ô‡∫Æ‡∫±‡∫ö‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫™‡∫π‡ªà‡∫Æ‡ªâ‡∫≤‡∫ô BoyMo Pizza",
    addIncome: "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    addExpense: "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    todayIncome: "‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    noIncome: "‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫™‡ªç‡∫≤‡∫•‡∫±‡∫ö‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    todayExpense: "‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    noExpense: "‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç‡∫™‡ªç‡∫≤‡∫•‡∫±‡∫ö‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    todayProfit: "‡∫Å‡∫≥‡ªÑ‡∫•‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    profitDesc: "‡∫Å‡∫≥‡ªÑ‡∫•‡∫Ñ‡∫¥‡∫î‡ªÑ‡∫•‡ªà‡∫à‡∫≤‡∫Å ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö - ‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    todayBalance: "‡∫ç‡∫≠‡∫î‡ªÄ‡∫á‡∫¥‡∫ô‡∫Ñ‡∫ª‡∫á‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    todayBalanceDesc: "‡∫ç‡∫≠‡∫î‡ªÄ‡∫á‡∫¥‡∫ô‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î‡ªÉ‡∫ô‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    recentTransactions: "‡∫ó‡∫∏‡∫•‡∫∞‡∫Å‡∫≥‡∫´‡∫º‡ªâ‡∫≤‡∫™‡∫∏‡∫î",
    colId: "‡∫•/‡∫î",
    colType: "‡∫õ‡∫∞‡ªÄ‡∫û‡∫î",
    colDetails: "‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î",
    colTime: "‡ªÄ‡∫ß‡∫•‡∫≤",
    colDate: "‡∫ß‡∫±‡∫ô‡∫ó‡∫µ",
    colAmountKip: "‡∫à‡∫≥‡∫ô‡∫ß‡∫ô (KIP)",
    txTypeIncome: "‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    txTypeExpense: "‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    noTransactions: "‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ó‡∫∏‡∫•‡∫∞‡∫Å‡∫≥‡ªÄ‡∫ó‡∫∑‡ªà‡∫≠.",
    colActions: "‡∫Å‡∫≤‡∫ô‡∫Å‡∫∞‡∫ó‡∫≥",
    edit: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç",
    delete: "‡∫•‡∫∂‡∫ö",
    deleteConfirmTitle: "‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫∂‡∫ö",
    deleteConfirmDesc: "‡∫ó‡ªà‡∫≤‡∫ô‡ªÅ‡∫ô‡ªà‡ªÉ‡∫à‡∫ö‡ªç‡ªà‡∫ß‡ªà‡∫≤‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫•‡∫∂‡∫ö‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫ô‡∫µ‡ªâ? ‡∫Å‡∫≤‡∫ô‡∫Å‡∫∞‡∫ó‡∫≥‡∫ô‡∫µ‡ªâ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å‡ªÑ‡∫î‡ªâ.",
    cancel: "‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å",
    confirm: "‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô",


    // Income Page
    addIncomeTitle: "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    editIncomeTitle: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    editData: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô",
    incomeFormTitle: "‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    incomeType: "‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    fromPizza: "‡∫à‡∫≤‡∫Å‡∫Å‡∫≤‡∫ô‡∫Ç‡∫≤‡∫ç‡∫û‡∫¥‡∫ä‡∫ä‡ªà‡∫≤",
    fromSalary: "‡∫à‡∫≤‡∫Å‡ªÄ‡∫á‡∫¥‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô",
    fromMom: "‡∫à‡∫≤‡∫Å‡ªÅ‡∫°‡ªà",
    fromOther: "‡∫≠‡∫∑‡ªà‡∫ô‡ªÜ",
    pizzaDetails: "‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡∫û‡∫¥‡∫ä‡∫ä‡ªà‡∫≤",
    sizeInches: "‡∫Ç‡∫∞‡ªú‡∫≤‡∫î (‡∫ô‡∫¥‡ªâ‡∫ß)",
    selectSize: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Ç‡∫∞‡ªú‡∫≤‡∫î",
    size6: "6 ‡∫ô‡∫¥‡ªâ‡∫ß",
    size7: "7 ‡∫ô‡∫¥‡ªâ‡∫ß",
    size9: "9 ‡∫ô‡∫¥‡ªâ‡∫ß",
    size10: "10 ‡∫ô‡∫¥‡ªâ‡∫ß",
    toppingType: "‡ªú‡ªâ‡∫≤",
    normal: "‡∫ó‡∫≥‡∫°‡∫∞‡∫î‡∫≤",
    seafood: "‡∫ó‡∫∞‡ªÄ‡∫•",
    pizzaTopping: "‡ªú‡ªâ‡∫≤‡∫û‡∫¥‡∫ä‡∫ä‡ªà‡∫≤",
    selectTopping: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªú‡ªâ‡∫≤‡∫û‡∫¥‡∫ä‡∫ä‡ªà‡∫≤",
    extraCheese: "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ä‡∫µ‡∫™ (+15,000 KIP)",
    calculatedPrice: "‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ó‡∫µ‡ªà‡∫Ñ‡∫¥‡∫î‡ªÑ‡∫•‡ªà",
    actualAmountKip: "‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ó‡∫µ‡ªà‡ªÑ‡∫î‡ªâ‡∫Æ‡∫±‡∫ö‡∫ï‡∫ª‡∫ß‡∫à‡∫¥‡∫á (KIP)",
    enterActualAmount: "‡∫õ‡ªâ‡∫≠‡∫ô‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ó‡∫µ‡ªà‡ªÑ‡∫î‡ªâ‡∫Æ‡∫±‡∫ö‡∫ï‡∫ª‡∫ß‡∫à‡∫¥‡∫á",
    description: "‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î",
    enterDescription: "‡∫õ‡ªâ‡∫≠‡∫ô‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡ªÄ‡∫ï‡∫µ‡∫° (‡∫ñ‡ªâ‡∫≤‡∫°‡∫µ)",
    bill: "‡ªÉ‡∫ö‡∫ö‡∫¥‡∫ô",
    uploadBill: "‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡ªÉ‡∫ö‡∫ö‡∫¥‡∫ô",
    saveIncome: "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",
    updateIncome: "‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö",

    // Expense Page
    addExpenseTitle: "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    editExpenseTitle: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    expenseFormTitle: "‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    expenseItem: "‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    selectExpenseItem: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô",
    amountKip: "‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô (KIP)",
    enterAmount: "‡∫õ‡ªâ‡∫≠‡∫ô‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô",
    saveExpense: "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    updateExpense: "‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç",
    
    // Date/Time
    transactionDate: "‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫ó‡∫∏‡∫•‡∫∞‡∫Å‡∫≥",
    time: "‡ªÄ‡∫ß‡∫•‡∫≤",
    pickDate: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ß‡∫±‡∫ô‡∫ó‡∫µ",


    // Profile Page
    manageProfile: "‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡ªÇ‡∫õ‡∫£‡ªÑ‡∫ü‡∫•‡ªå",
    personalInfo: "‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡ªà‡∫ß‡∫ô‡∫ï‡∫ª‡∫ß",
    updateProfileInfo: "‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡ªà‡∫ß‡∫ô‡∫ï‡∫ª‡∫ß‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô.",
    changePhoto: "‡∫õ‡ªà‡∫Ω‡∫ô‡∫Æ‡∫π‡∫ö",
    uploadInstructions: "‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡∫Æ‡∫π‡∫ö‡∫à‡∫≤‡∫Å Gallery ‡∫´‡∫º‡∫∑ ‡∫ñ‡ªà‡∫≤‡∫ç‡∫à‡∫≤‡∫Å‡∫Å‡ªâ‡∫≠‡∫á",
    uploadFromGallery: "‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡∫à‡∫≤‡∫Å Gallery",
    takePhoto: "‡∫ñ‡ªà‡∫≤‡∫ç‡∫Æ‡∫π‡∫ö",
    capture: "‡∫ñ‡ªà‡∫≤‡∫ç‡∫Æ‡∫π‡∫ö",
    retake: "‡∫ñ‡ªà‡∫≤‡∫ç‡ªÉ‡ªù‡ªà",
    usePhoto: "‡ªÉ‡∫ä‡ªâ‡∫Æ‡∫π‡∫ö‡∫ô‡∫µ‡ªâ",
    cameraAccessRequired: "‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡ªÄ‡∫ñ‡∫¥‡∫á‡∫Å‡ªâ‡∫≠‡∫á",
    allowCameraAccess: "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫≠‡∫∞‡∫ô‡∫∏‡∫ç‡∫≤‡∫î‡ªÉ‡∫´‡ªâ‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡ªÄ‡∫ñ‡∫¥‡∫á‡∫Å‡ªâ‡∫≠‡∫á‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô.",
    nickname: "‡∫ä‡∫∑‡ªà‡∫´‡∫º‡∫¥‡ªâ‡∫ô",
    saveChanges: "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Å‡∫≤‡∫ô‡∫õ‡ªà‡∫Ω‡∫ô‡ªÅ‡∫õ‡∫á",
    storeStatus: "‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Æ‡ªâ‡∫≤‡∫ô",
    setStoreStatus: "‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Ç‡∫≠‡∫á‡∫Æ‡ªâ‡∫≤‡∫ô BoyMo Pizza.",
    selectStatus: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞",
    statusOpen: "üü¢ ‡ªÄ‡∫õ‡∫µ‡∫î",
    statusClosed: "üî¥ ‡∫õ‡∫¥‡∫î",
    statusMaintenance: "üü° ‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á",
    statusHoliday: "üéâ ‡∫û‡∫±‡∫Å‡∫ß‡∫±‡∫ô‡∫ö‡∫∏‡∫ô",
    customerFeedback: "Feedback ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤",
    checkCustomerFeedback: "‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫Ñ‡∫ß‡∫≤‡∫°‡∫Ñ‡∫¥‡∫î‡ªÄ‡∫´‡∫±‡∫ô‡∫à‡∫≤‡∫Å‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤.",
    noFeedback: "‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ Feedback.",
    manageLogo: "‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡ªÇ‡∫•‡ªÇ‡∫Å‡ªâ‡∫Æ‡ªâ‡∫≤‡∫ô",
    updateLogoInfo: "‡∫õ‡ªà‡∫Ω‡∫ô‡ªÇ‡∫•‡ªÇ‡∫Å‡ªâ‡∫Ç‡∫≠‡∫á‡∫Æ‡ªâ‡∫≤‡∫ô.",
    uploadLogo: "‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î‡ªÇ‡∫•‡ªÇ‡∫Å‡ªâ",

    // Report Page
    reportTitle: "‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô",
    selectPeriod: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤",
    today: "‡∫°‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ",
    thisWeek: "‡∫≠‡∫≤‡∫ó‡∫¥‡∫î‡∫ô‡∫µ‡ªâ",
    thisMonth: "‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫ô‡∫µ‡ªâ",
    thisYear: "‡∫õ‡∫µ‡∫ô‡∫µ‡ªâ",
    pickDate: "‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ß‡∫±‡∫ô‡∫ó‡∫µ",
    totalIncome: "‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°",
    totalExpense: "‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç‡∫•‡∫ß‡∫°",
    netProfit: "‡∫Å‡∫≥‡ªÑ‡∫•‡∫™‡∫∏‡∫î‡∫ó‡∫¥",
    closingBalance: "‡∫ç‡∫≠‡∫î‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡∫ó‡ªâ‡∫≤‡∫ç‡∫á‡∫ß‡∫î",
    overview: "‡∫û‡∫≤‡∫ö‡∫•‡∫ß‡∫°",
    transactions: "‡∫ó‡∫∏‡∫•‡∫∞‡∫Å‡∫≥",

    // New menu items
    shareApp: "‡ªÅ‡∫ö‡ªà‡∫á‡∫õ‡∫±‡∫ô‡ªÅ‡∫≠‡∫±‡∫ö",
    rateApp: "‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡ªÅ‡∫≠‡∫±‡∫ö",
    rateAppTitle: "‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô‡ªÅ‡∫≠‡∫±‡∫ö‡∫Ç‡∫≠‡∫á‡∫û‡∫ß‡∫Å‡ªÄ‡∫Æ‡∫ª‡∫≤",
    rateAppDescription: "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫ö‡∫≠‡∫Å‡∫û‡∫ß‡∫Å‡ªÄ‡∫Æ‡∫ª‡∫≤‡∫ß‡ªà‡∫≤‡∫ó‡ªà‡∫≤‡∫ô‡∫°‡∫±‡∫Å‡ªÅ‡∫≠‡∫±‡∫ö‡∫ô‡∫µ‡ªâ‡∫´‡∫º‡∫≤‡∫ç‡∫™‡ªà‡∫≥‡ªÉ‡∫î.",
    submitRating: "‡∫™‡∫ª‡ªà‡∫á‡∫Ñ‡∫∞‡ªÅ‡∫ô‡∫ô",
    aboutApp: "‡∫Å‡ªà‡∫Ω‡∫ß‡∫Å‡∫±‡∫ö‡ªÅ‡∫≠‡∫±‡∫ö",
    aboutAppTitle: "‡∫Å‡ªà‡∫Ω‡∫ß‡∫Å‡∫±‡∫ö‡ªÅ‡∫≠‡∫±‡∫ö BoyMo Finances",
    aboutAppDesc1: "‡ªÅ‡∫≠‡∫±‡∫ö BoyMo Finances ‡ªÄ‡∫õ‡∫±‡∫ô‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫°‡∫∑‡∫™‡∫∞‡ªÄ‡∫û‡∫≤‡∫∞‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Æ‡ªâ‡∫≤‡∫ô BoyMo Pizza ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ä‡ªà‡∫ß‡∫ç‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡ªç‡∫•‡∫¥‡∫´‡∫≤‡∫ô‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡∫ß‡∫±‡∫ô.",
    aboutAppDesc2: "‡∫Ñ‡∫∏‡∫ô‡∫™‡∫ª‡∫°‡∫ö‡∫±‡∫î‡∫´‡∫º‡∫±‡∫Å:",
    featureIncome: "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö: ‡∫ï‡∫¥‡∫î‡∫ï‡∫≤‡∫°‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫à‡∫≤‡∫Å‡∫Å‡∫≤‡∫ô‡∏Ç‡∏≤‡∏¢‡∫û‡∫¥‡∫ä‡∫ä‡ªà‡∫≤ ‡ªÅ‡∫•‡∫∞ ‡ªÅ‡∫´‡∫º‡ªà‡∫á‡∫≠‡∫∑‡ªà‡∫ô‡ªÜ.",
    featureExpense: "‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç: ‡∫ï‡∫¥‡∫î‡∫ï‡∫≤‡∫°‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç‡∫ó‡∫µ‡ªà‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡∫∂‡ªâ‡∫ô‡ªÉ‡∫ô‡∫Æ‡ªâ‡∫≤‡∫ô.",
    featureReport: "‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô: ‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫û‡∫≤‡∫ö‡∫•‡∫ß‡∫°‡∫Å‡∫≤‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô, ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö, ‡∫•‡∫≤‡∫ç‡∫à‡ªà‡∫≤‡∫ç, ‡ªÅ‡∫•‡∫∞‡∫Å‡∫≥‡ªÑ‡∫•.",
    featureProfile: "‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡ªÇ‡∫õ‡∫£‡ªÑ‡∫ü‡∫•‡ªå: ‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Æ‡ªâ‡∫≤‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞.",
    featureMultiLang: "‡∫´‡∫º‡∫≤‡∫ç‡∫û‡∫≤‡∫™‡∫≤: ‡∫Æ‡∫≠‡∫á‡∫Æ‡∫±‡∫ö 5 ‡∫û‡∫≤‡∫™‡∫≤ (‡∫•‡∫≤‡∫ß, ‡ªÑ‡∫ó, ‡∫à‡∫µ‡∫ô, ‡∫≠‡∫±‡∫á‡∫Å‡∫¥‡∫î, ‡∫´‡∫ß‡∫Ω‡∫î‡∫ô‡∫≤‡∫°).",
    close: "‡∫õ‡∫¥‡∫î",

    // Developer Info
    developerInfo: "‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ú‡∫π‡ªâ‡∫û‡∫±‡∫î‡∫ó‡∫∞‡∫ô‡∫≤",
    developerInfoTitle: "‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ú‡∫π‡ªâ‡∫û‡∫±‡∫î‡∫ó‡∫∞‡∫ô‡∫≤",
    developerNameLabel: "‡∫ä‡∫∑‡ªà ‡ªÅ‡∫•‡∫∞ ‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô:",
    developerName: "‡∫ó‡ªâ‡∫≤‡∫ß ‡∫™‡∫ª‡∫°‡∫´‡∫ß‡∫±‡∫á ‡∫õ‡∫¥‡∫á‡∫™‡∫∞‡∫ô‡∫µ‡ªÉ‡∫à (‡∫ö‡∫≠‡∫ç)",
    developerPhoneLabel: "‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó/WhatsApp:",
    developerEmailLabel: "Gmail:",
};


const originalNavItems = [
    { nameKey: "home", icon: Home, href: "/dashboard" },
    { nameKey: "income", icon: Briefcase, href: "/dashboard/income" },
    { nameKey: "expense", icon: Pizza, href: "/dashboard/expense" },
    { nameKey: "report", icon: BarChart2, href: "/dashboard/report" },
];

const languages = [
      { name: "Lao", code: "Lao", flag: "üá±üá¶" },
      { name: "Thai", code: "Thai", flag: "üáπüá≠" },
      { name: "Chinese", code: "Chinese", flag: "üá®üá≥" },
      { name: "English", code: "English", flag: "üá¨üáß" },
      { name: "Vietnamese", code: "Vietnamese", flag: "üáªüá≥" },
];

// --- Translation Context ---
interface TranslationContextType {
    t: (key: string) => string;
    isTranslating: boolean;
    selectedLanguage: string;
    handleLanguageChange: (languageCode: string) => void;
}

const TranslationContext = createContext<TranslationContextType | null>(null);

export const useTranslation = () => {
    const context = useContext(TranslationContext);
    if (!context) {
        throw new Error("useTranslation must be used within a TranslationProvider");
    }
    return context;
};

function TranslationProvider({ children }: { children: React.ReactNode }) {
  const [selectedLanguage, setSelectedLanguage] = useState("Lao");
  const [translations, setTranslations] = useState<Record<string, string>>(originalText);
  const [isTranslating, setIsTranslating] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined') {
        const savedLanguage = localStorage.getItem('selectedLanguage') || "Lao";
        if (savedLanguage !== 'Lao') {
            handleLanguageChange(savedLanguage, true);
        } else {
            setSelectedLanguage(savedLanguage);
        }
    }
  }, []);

  const handleLanguageChange = useCallback(async (languageCode: string, isInitialLoad = false) => {
    if (!isInitialLoad) {
        setIsTranslating(true);
    }
    try {
        if (languageCode === 'Lao') {
            setTranslations(originalText);
        } else {
            const textsToTranslate = Object.values(originalText);
            const translationInput: TranslateTextInput = {
                texts: textsToTranslate,
                targetLanguage: languageCode,
            };
            const translationOutput = await translateText(translationInput);
            
            const newTranslations: any = {};
            const originalKeys = Object.keys(originalText);
            originalKeys.forEach((key, index) => {
                newTranslations[key] = translationOutput.translatedTexts[index];
            });
            setTranslations(newTranslations);
        }
        setSelectedLanguage(languageCode);
        if (typeof window !== 'undefined') {
            localStorage.setItem('selectedLanguage', languageCode);
        }
    } catch (error) {
        console.error("Translation failed:", error);
    } finally {
        if (!isInitialLoad) {
            setIsTranslating(false);
        }
    }
  }, []);
  
  const t = useCallback((key: string): string => {
      return translations[key] || key;
  }, [translations]);

  return (
    <TranslationContext.Provider value={{ t, isTranslating, selectedLanguage, handleLanguageChange }}>
        {children}
    </TranslationContext.Provider>
  )
}

// --- Transaction Context ---
type TransactionInput = Omit<Transaction, 'id' | 'date' | 'time'> & { timestamp: Date };
type PartialTransactionInput = Partial<Omit<Transaction, 'id' | 'date' | 'time'>> & { timestamp?: Date };

export interface Transaction {
    id: string;
    type: 'income' | 'expense';
    amount: number;
    description: string;
    date: string;
    time: string;
    timestamp: number;
    // For pizza income
    pizzaSize?: string;
    pizzaType?: string;
    extraCheese?: boolean;
    pizzaTopping?: string;
    // For expense
    expenseItem?: string;
}
interface TransactionContextType {
    transactions: Transaction[];
    addTransaction: (transaction: TransactionInput) => Promise<void>;
    updateTransaction: (id: string, transaction: PartialTransactionInput) => Promise<void>;
    deleteTransaction: (id: string) => Promise<void>;
    getTransactionById: (id: string) => Promise<Transaction | null>;
}

const TransactionContext = createContext<TransactionContextType | null>(null);

export const useTransactions = () => {
    const context = useContext(TransactionContext);
    if (!context) {
        throw new Error("useTransactions must be used within a TransactionProvider");
    }
    return context;
}

function TransactionProvider({ children }: { children: ReactNode }) {
    const [transactions, setTransactions] = useState<Transaction[]>([]);

    useEffect(() => {
        const q = query(collection(db, 'transactions'), orderBy('timestamp', 'desc'));
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const transactionsData: Transaction[] = [];
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                const docTimestamp = data.timestamp as Timestamp;
                const jsDate = docTimestamp.toDate();
                transactionsData.push({
                    id: doc.id,
                    type: data.type,
                    amount: data.amount,
                    description: data.description,
                    timestamp: jsDate.getTime(),
                    date: format(jsDate, 'yyyy-MM-dd'),
                    time: format(jsDate, 'HH:mm:ss'),
                    // pizza fields
                    pizzaSize: data.pizzaSize,
                    pizzaType: data.pizzaType,
                    extraCheese: data.extraCheese,
                    pizzaTopping: data.pizzaTopping,
                    // expense fields
                    expenseItem: data.expenseItem,
                });
            });
            setTransactions(transactionsData);
        });

        return () => unsubscribe();
    }, []);

    const addTransaction = async (transaction: TransactionInput) => {
        try {
            const { timestamp, ...rest } = transaction;
            await addDoc(collection(db, "transactions"), {
                ...rest,
                timestamp: Timestamp.fromDate(timestamp),
            });
        } catch (e) {
            console.error("Error adding document: ", e);
            throw e;
        }
    };
    
    const updateTransaction = async (id: string, transaction: PartialTransactionInput) => {
        const txDocRef = doc(db, 'transactions', id);
        const { timestamp, ...rest } = transaction;
        const dataToUpdate: any = { ...rest };
        if (timestamp) {
            dataToUpdate.timestamp = Timestamp.fromDate(timestamp);
        }
        await updateDoc(txDocRef, dataToUpdate);
    };

    const deleteTransaction = async (id: string) => {
        await deleteDoc(doc(db, 'transactions', id));
    };
    
    const getTransactionById = async (id: string): Promise<Transaction | null> => {
        const txDocRef = doc(db, 'transactions', id);
        const docSnap = await getDoc(txDocRef);

        if (docSnap.exists()) {
            const data = docSnap.data();
            const docTimestamp = data.timestamp as Timestamp;
            const jsDate = docTimestamp.toDate();
            return {
                id: docSnap.id,
                ...data,
                timestamp: jsDate.getTime(),
                date: format(jsDate, 'yyyy-MM-dd'),
                time: format(jsDate, 'HH:mm:ss'),
            } as Transaction;
        } else {
            return null;
        }
    }


    return (
        <TransactionContext.Provider value={{ transactions, addTransaction, updateTransaction, deleteTransaction, getTransactionById }}>
            {children}
        </TransactionContext.Provider>
    )
}


// --- Dialog Components ---
function RatingDialog({ t }: { t: (key: string) => string }) {
    const [rating, setRating] = useState(0);
    const [hover, setHover] = useState(0);
    const ratingEmojis = ["", "üòû", "üòï", "üòê", "üôÇ", "ü§©"];

    return (
        <Dialog>
            <DialogTrigger asChild>
                <button className={cn(
                    "flex items-center gap-3 rounded-lg px-2 py-2 text-sidebar-foreground transition-all hover:bg-sidebar-accent hover:text-primary-foreground w-full text-xs"
                )}>
                    <Star className="h-4 w-4" />
                    {t('rateApp')}
                </button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                    <DialogTitle>{t('rateAppTitle')}</DialogTitle>
                    <DialogDescription>{t('rateAppDescription')}</DialogDescription>
                </DialogHeader>
                <div className="flex justify-center items-center gap-4 py-4">
                    <div className="flex items-center text-4xl">
                        {[...Array(5)].map((_, index) => {
                            const ratingValue = index + 1;
                            return (
                                <button
                                    key={ratingValue}
                                    type="button"
                                    className="focus:outline-none"
                                    onClick={() => setRating(ratingValue)}
                                    onMouseEnter={() => setHover(ratingValue)}
                                    onMouseLeave={() => setHover(0)}
                                >
                                    <Star
                                        className="h-8 w-8 transition-colors"
                                        fill={ratingValue <= (hover || rating) ? "gold" : "gray"}
                                        color={ratingValue <= (hover || rating) ? "gold" : "gray"}
                                    />
                                </button>
                            );
                        })}
                    </div>
                     <div className="text-4xl w-12 h-12 flex items-center justify-center">
                        {rating > 0 && <span>{ratingEmojis[rating]}</span>}
                    </div>
                </div>
                <DialogFooter>
                    <Button type="submit">{t('submitRating')}</Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
}

function AboutAppDialog({ t }: { t: (key: string) => string }) {
  const features = ['featureIncome', 'featureExpense', 'featureReport', 'featureProfile', 'featureMultiLang'];
  return (
    <Dialog>
      <DialogTrigger asChild>
        <button className={cn(
            "flex items-center gap-3 rounded-lg px-2 py-2 text-sidebar-foreground transition-all hover:bg-sidebar-accent hover:text-primary-foreground w-full text-xs"
        )}>
            <Info className="h-4 w-4" />
            {t('aboutApp')}
        </button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Logo size={30} />
            {t('aboutAppTitle')}
          </DialogTitle>
          <DialogDescription>{t('aboutAppDesc1')}</DialogDescription>
        </DialogHeader>
        <div className="space-y-4 py-4">
            <h3 className="font-semibold text-card-foreground">{t('aboutAppDesc2')}</h3>
            <ul className="space-y-2 text-sm text-muted-foreground">
                {features.map(feature => (
                    <li key={feature} className="flex items-start gap-2">
                        <CheckCircle className="h-4 w-4 mt-0.5 text-green-500 flex-shrink-0" />
                        <span>{t(feature)}</span>
                    </li>
                ))}
            </ul>
        </div>
        <DialogFooter>
          <DialogTrigger asChild>
            <Button>{t('close')}</Button>
          </DialogTrigger>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

function DeveloperInfoDialog({ t }: { t: (key: string) => string }) {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <button className={cn(
            "flex items-center gap-3 rounded-lg px-2 py-2 text-sidebar-foreground transition-all hover:bg-sidebar-accent hover:text-primary-foreground w-full text-xs"
        )}>
            <Contact className="h-4 w-4" />
            {t('developerInfo')}
        </button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>{t('developerInfoTitle')}</DialogTitle>
        </DialogHeader>
        <div className="space-y-4 py-4 text-sm">
            <div className="flex flex-col">
                <span className="font-semibold text-card-foreground">{t('developerNameLabel')}</span>
                <span className="text-muted-foreground">{t('developerName')}</span>
            </div>
            <div className="flex flex-col">
                <span className="font-semibold text-card-foreground">{t('developerPhoneLabel')}</span>
                <span className="text-muted-foreground">02054539859</span>
            </div>
            <div className="flex flex-col">
                <span className="font-semibold text-card-foreground">{t('developerEmailLabel')}</span>
                <span className="text-muted-foreground">somvang.pingsanijai14@gmail.com</span>
            </div>
        </div>
        <DialogFooter>
          <DialogTrigger asChild>
            <Button>{t('close')}</Button>
          </DialogTrigger>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <TranslationProvider>
      <TransactionProvider>
        <LayoutContent>{children}</LayoutContent>
      </TransactionProvider>
    </TranslationProvider>
  )
}

function LayoutContent({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  const router = useRouter();
  const { t, isTranslating, selectedLanguage, handleLanguageChange } = useTranslation();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [profileImage, setProfileImage] = useState("https://placehold.co/100x100.png");
  const [nickname, setNickname] = useState("B");
  const { setLogoUrl } = useSettings();
  const logoInputRef = useRef<HTMLInputElement>(null);


  useEffect(() => {
    setIsMenuOpen(false);

    const savedNickname = localStorage.getItem('nickname') || "Boy";
    const savedProfileImage = localStorage.getItem('profileImage');
    setNickname(savedNickname);
    if (savedProfileImage) {
        setProfileImage(savedProfileImage);
    }
  }, [pathname]);

  const handleLogout = () => {
    router.push("/login");
  };

  const handleLogoFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const newLogoUrl = reader.result as string;
        localStorage.setItem('logoImage', newLogoUrl);
        setLogoUrl(newLogoUrl);
      };
      reader.readAsDataURL(file);
    }
  };


  const showBackButton = pathname !== '/dashboard';

  return (
    <div className="grid min-h-screen w-full bg-secondary">
      <div className="flex flex-col bg-background rounded-l-3xl border-2 md:border-4 border-primary">
        <header className="flex h-14 items-center gap-2 border-b bg-muted/40 px-2">
          <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>
            <SheetTrigger asChild>
              <Button
                variant="outline"
                size="icon"
                className="shrink-0 h-8 w-8"
              >
                <Menu className="h-4 w-4" />
                <span className="sr-only">{t('menu')}</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="flex flex-col bg-sidebar text-sidebar-foreground p-0 w-[240px]">
               <SheetTitle className="sr-only">{t('menu')}</SheetTitle>
               <SheetDescription className="sr-only">{t('menu')}</SheetDescription>
               <div className="flex h-[80px] items-center border-b p-2 justify-center">
                    <div className="flex flex-col items-center gap-2">
                         <Logo size={40} />
                         <input type="file" ref={logoInputRef} onChange={handleLogoFileChange} accept="image/*" className="hidden" />
                         <Button variant="outline" size="sm" className="w-full h-6 text-xs" onClick={() => logoInputRef.current?.click()}>
                            <Upload className="mr-2 h-3 w-3" />
                            {t('uploadLogo')}
                         </Button>
                    </div>
                </div>
              <nav className="grid gap-1 text-sm font-medium p-2">
                {originalNavItems.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      onClick={() => setIsMenuOpen(false)}
                      className={cn(
                        "flex items-center gap-3 rounded-lg px-2 py-2 text-sidebar-foreground transition-all hover:bg-sidebar-accent hover:text-primary-foreground text-xs",
                        pathname === item.href ? "bg-sidebar-accent text-primary-foreground" : ""
                      )}
                    >
                      <item.icon className="h-4 w-4" />
                      {isTranslating ? '...' : t(item.nameKey)}
                    </Link>
                ))}
                
                <hr className="my-2 border-muted-foreground/20" />

                <button className={cn(
                    "flex items-center gap-3 rounded-lg px-2 py-2 text-sidebar-foreground transition-all hover:bg-sidebar-accent hover:text-primary-foreground w-full text-xs"
                )}>
                    <Share2 className="h-4 w-4" />
                    {t('shareApp')}
                </button>
                
                <RatingDialog t={t} />
                <AboutAppDialog t={t} />
                <DeveloperInfoDialog t={t} />

              </nav>
            </SheetContent>
          </Sheet>
          {showBackButton && (
             <Button variant="outline" size="sm" className="h-8 px-2" onClick={() => router.back()}>
                <ArrowLeft className="h-4 w-4" />
            </Button>
          )}
          <div className="w-full flex-1">
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="secondary" size="sm" className="h-8 px-2" disabled={isTranslating}>
                <Languages className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
                {languages.map(lang => (
                    <DropdownMenuItem key={lang.code} onSelect={() => handleLanguageChange(lang.code)} disabled={isTranslating}>
                        <span className="mr-2">{lang.flag}</span>
                        {lang.name}
                    </DropdownMenuItem>
                ))}
            </DropdownMenuContent>
          </DropdownMenu>
           <Button asChild variant="ghost" className="relative h-8 w-8 rounded-full">
              <Link href="/dashboard/profile">
                <Avatar className="h-8 w-8">
                    <AvatarImage src={profileImage} alt={nickname} />
                    <AvatarFallback>{nickname.charAt(0).toUpperCase()}</AvatarFallback>
                </Avatar>
              </Link>
            </Button>
        </header>
        <main className="flex flex-1 flex-col gap-2 p-2 overflow-auto">
          {children}
        </main>
      </div>
    </div>
  );
}
